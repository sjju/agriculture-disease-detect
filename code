import torch
import matplotlib.pyplot as plt
from torch.utils.data import Dataset,DataLoader
from PIL import Image
from torchvision import  transforms,models
import json
import os
import numpy as np
from torch.autograd import Variable
import datetime

root1='D:/毕业设计/code/data/AgriculturalDisease_trainingset/images/'
root2='D:/毕业设计/code/data/AgriculturalDisease_validationset/images/'


EPOCH=10
BATCH_SIZE=1000
LR=0.001


def default_loader(path):
    return Image.open(path).convert('RGB')
class MyDataSet(Dataset):
    def __init__(self, json_Description, transform=None, target_transform=None, loader=default_loader, path_pre=None):
        description = open(json_Description, 'r')
        imgs = json.load(description)
        image_path = [element['image_id'] for element in imgs]
        image_label = [element['disease_class'] for element in imgs]
        imgs_Norm = list(zip(image_path, image_label))
        self.imgs = imgs_Norm
        self.transform = transform
        self.target_transform = target_transform
        self.loader = loader
        self.path_pre = path_pre
        #print(self.imgs)

    def __getitem__(self, index):
        path, label = self.imgs[index]
        img = self.loader(self.path_pre + path)
        #print(img)
        if self.transform is not None:
            img = self.transform(img)
        if self.target_transform is not None:
            label = self.target_transform(label)
        return img, label

    def __len__(self):
        return len(self.imgs)

class Cnn(torch.nn.Module):
    def __init__(self):
        super(Cnn, self).__init__()
        self.conv=torch.nn.Sequential(
            torch.nn.Conv2d(in_channels=3,out_channels=1,kernel_size=3,stride=1,padding=1),#(1,224,224)
            torch.nn.ReLU(True),
            torch.nn.MaxPool2d(2,2),#(1,112,112)
            torch.nn.Conv2d(1,4,5,stride=1,padding=2),#(4,112,112)
            torch.nn.ReLU(True),
            torch.nn.MaxPool2d(2,2),#(4,56,56)
        )
        self.out=torch.nn.Linear(4*56*56,61)

    def forward(self, x):
        x=self.conv(x)
        x=x.view(x.size(0),-1)
        output=self.out(x)
        return output



if __name__ == '__main__':
    start1=datetime.datetime.now()
    train_dataset=MyDataSet('D:/毕业设计/code/data/AgriculturalDisease_trainingset/AgriculturalDisease_train_annotations.json', transforms.Compose([
                                    transforms.Pad(4),
                                    transforms.CenterCrop(224),
                                    transforms.RandomHorizontalFlip(),
                                    transforms.ToTensor(),
                                    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))
                                ]),path_pre=root1)
    #print(train_dataset[0])
    kwargs = {'num_workers': 4, 'pin_memory': True}
    train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                              batch_size=BATCH_SIZE,
                                              shuffle=True,
                                              **kwargs)

    validation_dataset = MyDataSet(
        'D:/毕业设计/code/data/AgriculturalDisease_validationset/AgriculturalDisease_validation_annotations.json',
        transform=transforms.Compose([
            transforms.Pad(4),
            transforms.RandomResizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))
        ]),path_pre=root2)
    kwargs = {'num_workers': 4, 'pin_memory': True}
    validation_loader = torch.utils.data.DataLoader(dataset=validation_dataset,
                                              #batch_size=32,
                                              shuffle=False,
                                              **kwargs)

    cnn=Cnn()
    #cnn = torch.load('D:/毕业设计/code/data/config/cnn1.pkl')
    optimizer=torch.optim.Adam(cnn.parameters(),lr=LR)
    loss_func=torch.nn.CrossEntropyLoss()

    for epoch in range(EPOCH):
        for step,(b_x,b_y)in enumerate(train_loader):
            output=cnn(b_x)
            loss=loss_func(output,b_y)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            print("EPOCH:", epoch, "train loss:", float(loss))
    end1=datetime.datetime.now()
    print('running time:',end1-start1)

    start2 = datetime.datetime.now()
    correct=0
    total=0
    for data in validation_loader:
        images,labels=data
        output=cnn(Variable(images))
        _,predicted=torch.max(output.data,1)
        total+=labels.size(0)
        correct+=(predicted==labels).sum()

    print('Accuracy of the network on the test images:%d %%'%(100*correct/total))
    end2 = datetime.datetime.now()
    print('test time:',end2 - start2)
    torch.save(cnn.state_dict(), 'D:/毕业设计/code/data/config/cnn1.pkl')
